const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq();

async function main() {
    groq.chat.completions.create({
        // Param√®tres requis
        
        // Les messages constituent la conversation avec l'assistant. Ils d√©finissent le contexte et la requ√™te.
        messages: [
            // D√©finir un message syst√®me optionnel. Cela √©tablit le comportement de l'assistant
            // et peut √™tre utilis√© pour fournir des instructions sp√©cifiques sur la mani√®re dont il doit
            // se comporter tout au long de la conversation.
            {
                role: "system",
                content: "GNous commencerons par d√©velopper la plateforme sur univers-mc.cloud en int√©grant les services d'apprentissage automatique, de cartographie et de d√©veloppement d'algorithmes d'application. Ensuite, nous cr√©erons un syst√®me de mise en avant des comp√©tences en utilisant des m√©tadonn√©es pour les CV. Parall√®lement, nous utiliserons Ethereum, Remix et Solidity pour cr√©er et tester des contrats intelligents. Nous d√©velopperons √©galement des algorithmes d'apprentissage automatique pour am√©liorer la pr√©cision des m√©tadonn√©es des comp√©tences et optimiser l'√©conomie circulaire √† l'aide des fonctionnalit√© emoji(exemple liste_fichiers=(‚ú®, ‚åöÔ∏è, üì±, üíª, üñ•, üì∫, üìª, üíæ, üíø, üìÄ, üì∑, üîå, üí°, üì°, üîã, üì∫, üìΩ, üì∏, üìπ, üé•, üìû, ‚òéÔ∏è, üì†, üì∫, üìª, üéô, üî¶, üïØ, üóë, üõ¢, üí∏, üíµ, üí¥, üí∂, üí∑, üí∞, üí≥, ‚öΩÔ∏è, üèÄ, üèà, ‚õ≥Ô∏è, üéæ, üõπ, üé∏, üé∫, ü•Å, üé≤, üé¨) de bien ou serveur sur le serveur UMC i.c.o) et nodejs parkage.json et des methode d'affinage prompting entre le [role: 'assistant' & role: 'user'], ,."
            },
            // D√©finir un message de l'assistant pour introduire la documentation ou la r√©ponse.
            {
                role: "assistant",
                content: "guide nous sur toute les etapes ... jusqu'au Makefile update.md :"
            },
            // D√©finir un message de l'utilisateur pour lequel l'assistant doit r√©pondre.
            {
                role: "user",
                content: "voici la liste des fichier update g√©n√©rer pour service le script Makefile: style.css for classic groq"
            },
            {
                role: "system",
                content: "make build all."
            }
        ],
        // Le mod√®le de langage qui g√©n√©rera la r√©ponse.
        model: "mixtral-8x7b-32768",

        // Param√®tres optionnels
        
        // Contr√¥le de l'al√©atoire : diminuer le r√©sultat pour avoir moins de compl√©tions al√©atoires.
        // √Ä mesure que la temp√©rature se rapproche de z√©ro, le mod√®le deviendra d√©terministe et r√©p√©titif.
        temperature: 0.9,
        // Le nombre maximum de jetons √† g√©n√©rer. Les requ√™tes peuvent utiliser jusqu'√†
        // 2048 jetons partag√©s entre l'invite et la compl√©tion.
        max_tokens: 1024,
        // Contr√¥le de la diversit√© via l'√©chantillonnage du noyau : 0.5 signifie que la moiti√© de toutes les options
        // pond√©r√©es par la probabilit√© sont consid√©r√©es.
        top_p: 1,
        // Une s√©quence d'arr√™t est une cha√Æne de texte pr√©d√©finie ou sp√©cifi√©e par l'utilisateur qui
        // signale √† l'IA de s'arr√™ter de g√©n√©rer du contenu, assurant que ses r√©ponses
        // restent concentr√©es et concises. Des exemples incluent les marques de ponctuation et
        // des marqueurs comme "[fin]".
        stop: null,
        // Si d√©fini, des deltas de messages partiels seront envoy√©s.
        stream: false
    }).then((chatCompletion)=>{
        // Imprime la compl√©tion retourn√©e par le mod√®le de langage.
        const cssContent = chatCompletion.choices[0]?.message?.content;
        // D√©finit le chemin du fichier de sortie o√π la documentation sera enregistr√©e.
        const outputFilePath = "output/update_" + new Date().toISOString().replace(/[-:TZ]/g, "") + ".md";
        // √âcrit le contenu dans le fichier sp√©cifi√©.
        fs.writeFileSync(outputFilePath, cssContent);
        // Affiche un message confirmant que la documentation a √©t√© g√©n√©r√©e et enregistr√©e.
        console.log("Documentation g√©n√©r√©e et enregistr√©e dans " + outputFilePath);
    });
}

main();
