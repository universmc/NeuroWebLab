const fs = require('fs').promises;
const Groq = require('groq-sdk');
const groq = new Groq();

// Templates de messages et fonction pour remplir les templates
const messageTemplates = {
    systemMessage: "Pr√©sentation de Pi: IA au c≈ìur du systemDream ...",
    assistantMessage: "Vous √™tes une intelligence artificielle √† haute potentialit√© g√©n√©rative...",
    userMessage: "bonjour : √† toi 'choice' message input js groq"
};

function fillTemplate(template, params) {
    return template.replace(/\{(\w+)\}/g, (match, key) => params[key] || match);
}

const contextData = {
    // Donn√©es contextuelles pour remplir les templates
};
// Donn√©es par d√©faut de l'assistant
// Configuration initiale de l'assistant
const defaultAssistantData = {
  nom: 'assistant',
  description: "Bonjour, je suis votre assistant IA 'pi'."
};

function changeAssistantName(newName) {
  defaultAssistantData.description = newName;
  console.log(`üíé_pi lib groq-sdk: ${defaultAssistantData.description}`);
}

// Fonction fictive pour simuler la saisie utilisateur - √† remplacer par votre propre impl√©mentation
async function getUserInput(assistantData) {
  // Cette fonction doit √™tre remplac√©e par votre logique de r√©cup√©ration de l'entr√©e utilisateur
  return new Promise((resolve) => setTimeout(() => resolve("quitter"), 1000)); // Simule l'entr√©e utilisateur "quitter" apr√®s 1 seconde
}

// Fonction pour modifier le nom de l'assistant
function changeAssistantName(newName) {
  defaultAssistantData.description = newName;
  console.log(`üíé_pi lib groq-sdk: ${defaultAssistantData.description}`);
}

// Fonction principale pour g√©rer le flux de dialogue
async function main() {
  changeAssistantName(defaultAssistantData.description || "Bonjour, je suis votre assistant IA en Fran√ßais.");

  let sessionActive = true;
  let userInput;

  while (sessionActive) {
    userInput = await getUserInput(defaultAssistantData);

    if (userInput.toLowerCase() === "quitter") {
      sessionActive = false;
      console.log("Assistant: Au revoir !");
      continue;
    }

    // Switch pour le changement de persona
    if (userInput.toLowerCase().startsWith("/persona")) {
      const newPersona = userInput.toLowerCase().split("/persona ")[1];
      const personaFilePath = `./json/persona_${newPersona}.json`;

      // V√©rifier si le fichier JSON de la nouvelle persona existe
      if (fs.existsSync(personaFilePath)) {
        // Charger les donn√©es de la nouvelle persona
        const newAssistantData = require(personaFilePath);
        changeAssistantName(newAssistantData.description);
        console.log(`Assistant: Changement de persona effectu√©. Nouvelle persona : ${newPersona}`);
        continue;
      } else {
        console.log(`Assistant: La persona ${newPersona} n'existe pas.`);
        continue;
      }
    }

    // Ajoutez ici d'autres commandes et leur logique associ√©e selon vos besoins
         // G√©n√©ration de r√©ponses √† l'aide de Groq SDK en fonction du r√¥le choisi
        try {
            const messages = [
                { role: "system", content: fillTemplate(messageTemplates.systemMessage, contextData) },
                { role: "assistant", content: fillTemplate(messageTemplates.assistantMessage, contextData) },
                { role: "user", content: fillTemplate(messageTemplates.userMessage, contextData) },
                { role: currentPersona, content: userInput }
            ];

            const chatCompletion = await groq.chat.completions.create({
                messages: messages,
                model: "mixtral-8x7b-32768",
                temperature: 0.6,
                max_tokens: 1024,
                top_p: 1,
                stream: false,
                stop: null
            });

            const fullResponse = chatCompletion.choices[0]?.message?.content || "D√©sol√©, je n'ai pas compris.";
            console.log(`ü¶â_pi : ${fullResponse}`);
        } catch (error) {
            console.error("Erreur lors de la g√©n√©ration de la r√©ponse :", error);
        }
    }
}